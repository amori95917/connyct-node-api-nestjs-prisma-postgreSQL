// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch"]
  binaryTargets   = ["native"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  fullName        String?
  email           String           @unique
  username        String?          @unique
  password        String
  emailToken      String?          @map("email_token")
  passwordToken   String?          @map("password_token")
  confirm         Boolean          @default(true)
  isValid         Boolean          @default(false) @map("is_valid")
  isActive        Boolean          @default(false)
  isSuperuser     Boolean          @default(false)
  isEmailVerified Boolean          @default(false)
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt @db.Timestamp()
  // lastLogin
  posts           Post[]
  postRatings     PostRating[]
  commentRatings  CommentRating[]
  userRoles       UserRole[]
  RoleRight       RoleRight[]
  employee        CompanyEmployee? @relation("EmployeeUser")

  Company                  Company[]
  InvitedEmployee          InvitedEmployee[]
  FollowUnfollowCompany    FollowUnfollowCompany[]
  FollowedToUser           FollowUserToUser[]         @relation("Followed_To_User")
  FollowedByUser           FollowUserToUser[]         @relation("Followed_By_User")
  Like                     PostReaction[]
  Comment                  Comment[]
  CommentMentions          CommentMentions[]
  CommentReactions         CommentReactions[]
  UserProfile              UserProfile?
  OTP                      OTP[]
  DiscussionVote           DiscussionVote[]
  DiscussionAnswer         DiscussionAnswer[]
  CompanyDiscussions       CompanyDiscussions[]
  DiscussionAnswerVote     DiscussionAnswerVote[]
  DiscussionAnswerMentions DiscussionAnswerMentions[]
  CompanyCommunity         CompanyCommunity[]
  CompanyCommunityRole     CompanyCommunityRole[]
  InvitedBYUser            CommunityMember[]          @relation("InvitedByUser")
  CommunityMember          CommunityMember[]          @relation("InvitedMember")

  @@unique([id, email])
}

model Role {
  id              String            @id @default(uuid())
  name            String            @unique
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt @db.Timestamp()
  userRoles       UserRole[]
  RoleRight       RoleRight[]
  InvitedEmployee InvitedEmployee[]
}

model Right {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt @db.Timestamp()
  RoleRight RoleRight[]
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model UserProfile {
  id           String    @id @default(uuid())
  address      String?
  phoneNo      String?
  profileImage String?
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt @db.Timestamp()
}

model RoleRight {
  id        String    @id @default(uuid())
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  rightId   String
  right     Right     @relation(fields: [rightId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([roleId, rightId], name: "roldId_rightId")
}

enum RegistrationNumberType {
  PAN
  VAT
}

enum CompanyDocumentType {
  PAN
  VAT
  COMPANY_REGISTRATION
  TAX_CLEARANCE
  BANK_CHEQUE
  TRADEMARK
}

model Company {
  id                     String                  @id @default(uuid())
  name                   String?
  legalName              String                  @unique
  registrationNumberType RegistrationNumberType?
  registrationNumber     String?                 @unique
  establishedDate        DateTime?
  companyStage           CompanyStage?
  description            String?
  mission                String?
  vision                 String?
  ownership              Ownership?
  branches               Branch[]
  // may be apt to use range instead
  numberOfemployees      Int                     @default(1)
  contactEmail           String?                 @unique
  transactions           Float?
  isActive               Boolean                 @default(false)
  isVerified             Boolean                 @default(false)

  // follow, follower, posts, address, contacts, main products, company user with various role, rating, certifications
  // response rate, response time, number of sales and so on
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()

  employees CompanyEmployee[] @relation("EmployeeCompany")

  owner                 User                    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId               String
  FollowUnfollowCompany FollowUnfollowCompany[]
  website               String?
  contactNumber         String?
  slogan                String?
  Post                  Post[]
  avatar                String?
  accountStatus         AccountStatus           @default(PENDING)
  reason                String?
  slug                  String                  @unique
  CompanyDiscussions    CompanyDiscussions[]
  CompanyDocument       CompanyDocument[]
  CompanyCommunity      CompanyCommunity[]
  CommunityMember       CommunityMember[]
}

model CompanyDocument {
  id        String              @id @default(uuid())
  companyId String
  company   Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  type      CompanyDocumentType
  document  String
  createdAt DateTime?           @default(now())
  updatedAt DateTime?           @updatedAt @db.Timestamp()
}

// id, name, address, contactNumber, contactEmail, createdAt, updatedAt
model Branch {
  id            String     @id @default(uuid())
  type          BranchType
  contactNumber String     @unique
  contactEmail  String     @unique
  country       String
  city          String
  zipCode       String?
  state         String?
  street        String?
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt @db.Timestamp()
  Company       Company    @relation(fields: [companyId], references: [id])
  companyId     String

  @@unique([contactNumber, contactEmail])
}

// model Address {
//   id        String    @id @default(uuid())
//   country   String
//   city      String
//   state     String?
//   zipCode   String?
//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @updatedAt @db.Timestamp()
//   branchId  String?
// }

model CompanyEmployee {
  id         String  @id @default(uuid())
  employeeId String  @unique
  employee   User    @relation("EmployeeUser", fields: [employeeId], references: [id], onDelete: Cascade)
  companyId  String
  company    Company @relation("EmployeeCompany", fields: [companyId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt @db.Timestamp()
  TagWithPost TagWithPost[]

  @@index([id, name])
}

model TagWithPost {
  id     String @id @default(uuid())
  tagsId String
  tags   Tag?   @relation(fields: [tagsId], references: [id])
  postId String
  post   Post?  @relation(fields: [postId], references: [id])
}

model Post {
  id          String         @id @default(uuid())
  text        String?
  rating      Int            @default(0)
  creatorId   String
  creator     User           @relation(fields: [creatorId], references: [id])
  postRating  PostRating[]
  comments    Comment[]
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @updatedAt @db.Timestamp()
  Product     Product[]
  TagWithPost TagWithPost[]
  isSaleAble  Boolean        @default(false)
  isDeleted   Boolean        @default(false)
  isVerified  Boolean        @default(false)
  isPublished Boolean        @default(false)
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Like        PostReaction[]
  PostImage   PostImage[]

  @@index([companyId])
}

model PostImage {
  id          String    @id @default(uuid())
  metaTitle   String?
  imageURL    String?   @unique
  description String?
  postId      String?
  post        Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt @db.Timestamp()

  @@index([postId])
}

model Product {
  id          String  @id @default(uuid())
  name        String?
  description String?
  image       String
  postId      String
  post        Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Reactions {
  id           String         @id @default(uuid())
  reactionType String         @unique
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @default(now())
  PostReaction PostReaction[]
}

model PostReaction {
  id         String    @id @default(uuid())
  reactionId String
  reactions  Reactions @relation(fields: [reactionId], references: [id])
  postId     String
  post       Post?     @relation(fields: [postId], references: [id])
  userId     String
  user       User?     @relation(fields: [userId], references: [id])
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt @db.Timestamp()

  @@index([postId, reactionId, userId])
}

model PostRating {
  userId String
  postId String
  rating RatingStatus
  user   User         @relation(fields: [userId], references: [id])
  post   Post         @relation(fields: [postId], references: [id])

  @@unique(fields: [userId, postId], name: "UserAndPostIds")
}

model Comment {
  id                 String             @id @default(uuid())
  text               String
  rating             Int                @default(0)
  creatorId          String
  postId             String?
  repliedToCommentId String?
  repliedToReplyId   String?
  commentRating      CommentRating[]
  user               User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  post               Post?              @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment      Comment?           @relation(name: "CommentToComment", fields: [repliedToCommentId], references: [id], onDelete: Cascade)
  comments           Comment[]          @relation(name: "CommentToComment")
  parentReply        Comment?           @relation(name: "ReplyToReply", fields: [repliedToReplyId], references: [id], onDelete: Cascade)
  replies            Comment[]          @relation(name: "ReplyToReply")
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?          @updatedAt @db.Timestamp()
  CommentMentions    CommentMentions[]
  CommentReactions   CommentReactions[]

  @@index([postId, repliedToCommentId, repliedToReplyId, creatorId])
}

model CommentMentions {
  id        String    @id @default(uuid())
  mentionId String?
  user      User?     @relation(fields: [mentionId], references: [id], onDelete: Cascade)
  commentId String?
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model CommentReactions {
  id         String    @id @default(uuid())
  reactionId String
  commentId  String
  creatorId  String
  comment    Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt @db.Timestamp()
}

model CommentRating {
  userId    String
  commentId String
  rating    RatingStatus
  user      User         @relation(fields: [userId], references: [id])
  comment   Comment      @relation(fields: [commentId], references: [id])

  @@unique(fields: [userId, commentId], name: "UserAndCommentIds")
}

enum CompanyStage {
  STARTUP
  SCALEUP
}

enum Ownership {
  SOLE
  PARTNERSHIP
  CORPORATE
  LIMITEDLIABILITYCOMPANY
  NONPROFIT
  // will include other if needed
}

enum RatingStatus {
  NEUTRAL
  UPVOTED
  DOWNVOTED
}

enum BranchType {
  HEADQUARTER
  BRANCH_OFFICE
}

enum AccountStatus {
  APPROVED
  REVIEW
  PENDING
  REJECTED
}

enum Vote {
  UPVOTE
  DOWNVOTE
}

//

model InvitedEmployee {
  id               String    @id @default(uuid())
  invitedBy        User      @relation(fields: [invitedId], references: [id])
  invitedId        String
  invitedEmail     String    @unique()
  invitedRole      Role      @relation(fields: [invitedRoleId], references: [id])
  invitedRoleId    String
  isInviteAccepted Boolean   @default(false)
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt @db.Timestamp()
}

model FollowUnfollowCompany {
  id           String    @id @default(uuid())
  followedBy   User      @relation(fields: [followedById], references: [id], onDelete: Cascade)
  followedById String
  followedTo   Company   @relation(fields: [followedToId], references: [id], onDelete: Cascade)
  followedToId String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt @db.Timestamp()
}

model FollowUserToUser {
  id           String   @id @default(uuid())
  followedTo   User     @relation("Followed_To_User", fields: [followedToId], references: [id], onDelete: Cascade)
  followedToId String
  followedBy   User     @relation("Followed_By_User", fields: [followedById], references: [id], onDelete: Cascade)
  followedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @db.Timestamp()
}

model Industry {
  id            String    @id @default(uuid())
  type          String    @unique
  description   String?
  isActive      Boolean   @default(false)
  pirorityOrder Int       @default(autoincrement())
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt @db.Timestamp()
}

model OTP {
  id             String    @id @default(uuid())
  otp            Int
  expirationDate DateTime
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt @db.Timestamp()
}

model CompanyDiscussions {
  id                   String                 @id @default(uuid())
  title                String
  description          String
  userId               String
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId            String
  company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  DiscussionVote       DiscussionVote[]
  DiscussionAnswer     DiscussionAnswer[]
  slug                 String?
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt @db.Timestamp()
  DiscussionAnswerVote DiscussionAnswerVote[]
}

model DiscussionVote {
  id                String             @id @default(uuid())
  vote              Vote
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussionId      String
  companyDiscussion CompanyDiscussions @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  createdAt         DateTime?          @default(now())
  updatedAt         DateTime?          @updatedAt @db.Timestamp()
}

model DiscussionAnswer {
  id                       String                     @id @default(uuid())
  answer                   String
  discussionId             String
  discussion               CompanyDiscussions         @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  userId                   String
  user                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  repliedToAnswerId        String?
  parentAnswer             DiscussionAnswer?          @relation("ReplyToAnswer", fields: [repliedToAnswerId], references: [id])
  DiscussionAnswer         DiscussionAnswer[]         @relation("ReplyToAnswer")
  createdAt                DateTime?                  @default(now())
  updatedAt                DateTime?                  @updatedAt @db.Timestamp()
  DiscussionAnswerVote     DiscussionAnswerVote[]
  DiscussionAnswerMentions DiscussionAnswerMentions[]
}

model DiscussionAnswerVote {
  id                 String             @id @default(uuid())
  vote               Vote
  discussionId       String
  discussion         CompanyDiscussions @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionAnswerId String
  discussionAnswer   DiscussionAnswer   @relation(fields: [discussionAnswerId], references: [id], onDelete: Cascade)
  userId             String
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime?          @default(now())
  updatedAt          DateTime?          @updatedAt @db.Timestamp()
}

model DiscussionAnswerMentions {
  id        String           @id @default(uuid())
  mentionId String
  user      User             @relation(fields: [mentionId], references: [id], onDelete: Cascade)
  answerId  String
  answer    DiscussionAnswer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  createdAt DateTime?        @default(now())
  updatedAt DateTime?        @updatedAt @db.Timestamp()
}

enum CommunityType {
  PRIVATE
  PUBLIC
}

enum CommunityRole {
  ADMIN
  MODERATOR
}

model CompanyCommunity {
  id                   String                 @id @default(uuid())
  name                 String
  description          String
  type                 CommunityType
  profile              String
  slug                 String                 @unique
  companyId            String
  company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creatorId            String
  user                 User                   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt            DateTime?              @default(now())
  updatedAt            DateTime?              @updatedAt @db.Timestamp()
  CompanyCommunityRole CompanyCommunityRole[]
  CommunityMember      CommunityMember[]
}

model CompanyCommunityRole {
  id               String           @id @default(uuid())
  role             CommunityRole
  communityId      String
  companyCommunity CompanyCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)
  userId           String
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt @db.Timestamp()
}

model CommunityMember {
  id            String           @id @default(uuid())
  invitedById   String?
  invitedByUser User?            @relation("InvitedByUser", fields: [invitedById], references: [id], onDelete: Cascade)
  communityId   String
  community     CompanyCommunity @relation(fields: [communityId], references: [id], onDelete: Cascade)
  memberId      String
  member        User             @relation("InvitedMember", fields: [memberId], references: [id], onDelete: Cascade)
  companyId     String
  company       Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  isAccepted    Boolean          @default(false)
  createdAt     DateTime?        @default(now())
  updatedAt     DateTime?        @updatedAt @db.Timestamp()
}
