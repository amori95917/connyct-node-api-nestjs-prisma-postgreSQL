// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String           @id @default(uuid())
  firstName     String
  lastName      String
  email         String           @unique
  username      String           @unique
  password      String
  emailToken    String?          @map("email_token")
  passwordToken String?          @map("password_token")
  confirm       Boolean          @default(false)
  isValid       Boolean          @default(false) @map("is_valid")
  isActive      Boolean          @default(false)
  isSuperuser   Boolean          @default(false)
  createdAt     DateTime?        @default(now())
  updatedAt     DateTime?        @updatedAt @db.Timestamp()
  // lastLogin
  posts         Post[]
  postVotes     PostVote[]
  comment       Comment[]
  commentVotes  CommentVote[]
  userRoles     UserRole[]
  RoleRight     RoleRight[]
  employee      CompanyEmployee? @relation("EmployeeUser")

  @@unique([id, email])
}

model Role {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt @db.Timestamp()
  userRoles UserRole[]
  RoleRight RoleRight[]
}

model Right {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt @db.Timestamp()
  RoleRight RoleRight[]
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model RoleRight {
  id        String    @id @default(uuid())
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  rightId   String
  right     Right     @relation(fields: [rightId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  @@unique([roleId, rightId], name: "roldId_rightId")
}

model Company {
  id                 String       @id @default(uuid())
  name               String
  legalName          String
  registrationNumber String
  establishedDate    DateTime
  companyStage       CompanyStage
  description        String
  mission            String?
  vision             String?
  ownership          Ownership
  addresses          Address[]
  // businessType BusinessType - industry
  branches           Int          @default(0)
  // may be apt to use range instead
  numberOfemployees  Int          @default(1)
  transactions       Float
  isActive           Boolean

  // follow, follower, posts, address, contacts, main products, company user with various role, rating, certifications
  // response rate, response time, number of sales and so on
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()

  employees CompanyEmployee[] @relation("EmployeeCompany")
}

model Address {
  id        String    @id @default(uuid())
  country   String
  city      String
  state     String
  zipCode   String
  address1  String
  address2  String
  companyId String    @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()
  Company   Company   @relation(fields: [companyId], references: [id])
}

model CompanyEmployee {
  id         String  @id @default(uuid())
  employeeId String  @unique
  employee   User    @relation("EmployeeUser", fields: [employeeId], references: [id])
  companyId  String
  company    Company @relation("EmployeeCompany", fields: [companyId], references: [id])
}

model Post {
  id        String     @id @default(uuid())
  text      String
  votes     Int        @default(0)
  authorId  String
  author    User       @relation(fields: [authorId], references: [id])
  postVotes PostVote[]
  comments  Comment[]
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt @db.Timestamp()
}

model PostVote {
  userId       String
  postId       String
  votingStatus VotingStatus
  user         User         @relation(fields: [userId], references: [id])
  post         Post         @relation(fields: [postId], references: [id])

  @@unique(fields: [userId, postId], name: "UserAndPostIds")
}

model Comment {
  id            String        @id @default(uuid())
  text          String
  votes         Int           @default(0)
  creatorId     String
  postId        String?
  repliedToId   String?
  commentVote   CommentVote[]
  user          User          @relation(fields: [creatorId], references: [id])
  post          Post?         @relation(fields: [postId], references: [id])
  parentComment Comment?      @relation(name: "CommentToComment", fields: [repliedToId], references: [id])
  comments      Comment[]     @relation(name: "CommentToComment")
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt @db.Timestamp()
}

model CommentVote {
  userId       String
  commentId    String
  votingStatus VotingStatus
  user         User         @relation(fields: [userId], references: [id])
  comment      Comment      @relation(fields: [commentId], references: [id])

  @@unique(fields: [userId, commentId], name: "UserAndCommentIds")
}

enum CompanyStage {
  STARTUP
  SCALEUP
}

enum Ownership {
  SOLE
  PARTNERSHIP
  CORPORATE
  LIMITEDLIABILITYCOMPANY
  NONPROFIT
  // will include other if needed
}

enum VotingStatus {
  NEUTRAL
  UPVOTED
  DOWNVOTED
}
