// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  email          String           @unique
  username       String?          @unique
  password       String
  emailToken     String?          @map("email_token")
  passwordToken  String?          @map("password_token")
  confirm        Boolean          @default(true)
  isValid        Boolean          @default(false) @map("is_valid")
  isActive       Boolean          @default(false)
  isSuperuser    Boolean          @default(false)
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt @db.Timestamp()
  // lastLogin
  posts          Post[]
  postRatings    PostRating[]
  comment        Comment[]
  commentRatings CommentRating[]
  userRoles      UserRole[]
  RoleRight      RoleRight[]
  employee       CompanyEmployee? @relation("EmployeeUser")

  Company               Company[]
  InvitedEmployee       InvitedEmployee[]
  FollowUnfollowCompany FollowUnfollowCompany[]
  FollowedToUser        FollowUserToUser[]      @relation("Followed_To_User")
  FollowedByUser        FollowUserToUser[]      @relation("Followed_By_User")

  @@unique([id, email])
}

model Role {
  id              String            @id @default(uuid())
  name            String            @unique
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt @db.Timestamp()
  userRoles       UserRole[]
  RoleRight       RoleRight[]
  InvitedEmployee InvitedEmployee[]
}

model Right {
  id        String      @id @default(uuid())
  name      String
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt @db.Timestamp()
  RoleRight RoleRight[]
}

model UserRole {
  id        String    @id @default(uuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()
}

model RoleRight {
  id        String    @id @default(uuid())
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  rightId   String
  right     Right     @relation(fields: [rightId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([roleId, rightId], name: "roldId_rightId")
}

model Company {
  id                 String        @id @default(uuid())
  name               String?
  legalName          String        @unique
  registrationNumber String?       @unique
  establishedDate    DateTime?
  companyStage       CompanyStage?
  description        String?
  mission            String?
  vision             String?
  ownership          Ownership?
  addresses          Json?
  branches           Branch[]
  // may be apt to use range instead
  numberOfemployees  Int           @default(1)
  contactEmail       String?       @unique
  transactions       Float?
  isActive           Boolean       @default(false)
  isVerified         Boolean       @default(false)

  // follow, follower, posts, address, contacts, main products, company user with various role, rating, certifications
  // response rate, response time, number of sales and so on
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()

  employees CompanyEmployee[] @relation("EmployeeCompany")

  owner                 User                    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId               String
  FollowUnfollowCompany FollowUnfollowCompany[]
}

// id, name, address, contactNumber, contactEmail, createdAt, updatedAt
model Branch {
  id            String    @id @default(uuid())
  name          String
  contactNumber String
  contactEmail  String
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt @db.Timestamp()
  address       Address[]
  Company       Company   @relation(fields: [companyId], references: [id])
  companyId     String
}

model Address {
  id        String    @id @default(uuid())
  country   String
  city      String
  state     String?
  zipCode   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt @db.Timestamp()
  Branch    Branch?   @relation(fields: [branchId], references: [id])
  branchId  String?
}

model CompanyEmployee {
  id         String  @id @default(uuid())
  employeeId String  @unique
  employee   User    @relation("EmployeeUser", fields: [employeeId], references: [id], onDelete: Cascade)
  companyId  String
  company    Company @relation("EmployeeCompany", fields: [companyId], references: [id], onDelete: Cascade)
}

model Tag {
  id          String        @id @default(uuid())
  name        String        @unique
  TagWithPost TagWithPost[]
}

model TagWithPost {
  id     String @id @default(uuid())
  tagsId String
  tags   Tag?   @relation(fields: [tagsId], references: [id])
  postId String
  post   Post?  @relation(fields: [postId], references: [id])
}

model Post {
  id          String        @id @default(uuid())
  text        String
  rating      Int           @default(0)
  creatorId   String
  creator     User          @relation(fields: [creatorId], references: [id])
  postRating  PostRating[]
  comments    Comment[]
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt @db.Timestamp()
  Product     Product[]
  TagWithPost TagWithPost[]
  isSaleAble  Boolean       @default(false)
  isDeleted   Boolean       @default(false)
  companyId   String
}

model Product {
  id          String  @id @default(uuid())
  name        String?
  description String?
  image       String
  postId      String
  post        Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model PostRating {
  userId String
  postId String
  rating RatingStatus
  user   User         @relation(fields: [userId], references: [id])
  post   Post         @relation(fields: [postId], references: [id])

  @@unique(fields: [userId, postId], name: "UserAndPostIds")
}

model Comment {
  id            String          @id @default(uuid())
  text          String
  rating        Int             @default(0)
  creatorId     String
  postId        String?
  repliedToId   String?
  commentRating CommentRating[]
  user          User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  post          Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  parentComment Comment?        @relation(name: "CommentToComment", fields: [repliedToId], references: [id])
  comments      Comment[]       @relation(name: "CommentToComment")
  createdAt     DateTime?       @default(now())
  updatedAt     DateTime?       @updatedAt @db.Timestamp()
}

model CommentRating {
  userId    String
  commentId String
  rating    RatingStatus
  user      User         @relation(fields: [userId], references: [id])
  comment   Comment      @relation(fields: [commentId], references: [id])

  @@unique(fields: [userId, commentId], name: "UserAndCommentIds")
}

enum CompanyStage {
  STARTUP
  SCALEUP
}

enum Ownership {
  SOLE
  PARTNERSHIP
  CORPORATE
  LIMITEDLIABILITYCOMPANY
  NONPROFIT
  // will include other if needed
}

enum RatingStatus {
  NEUTRAL
  UPVOTED
  DOWNVOTED
}

//

model InvitedEmployee {
  id               String    @id @default(uuid())
  invitedBy        User      @relation(fields: [invitedId], references: [id])
  invitedId        String
  invitedEmail     String    @unique()
  invitedRole      Role      @relation(fields: [invitedRoleId], references: [id])
  invitedRoleId    String
  isInviteAccepted Boolean   @default(false)
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt @db.Timestamp()
}

model FollowUnfollowCompany {
  id           String    @id @default(uuid())
  followedBy   User      @relation(fields: [followedById], references: [id], onDelete: Cascade)
  followedById String
  followedTo   Company   @relation(fields: [followedToId], references: [id], onDelete: Cascade)
  followedToId String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt @db.Timestamp()
}

model FollowUserToUser {
  id           String   @id @default(uuid())
  followedTo   User     @relation("Followed_To_User", fields: [followedToId], references: [id], onDelete: Cascade)
  followedToId String
  followedBy   User     @relation("Followed_By_User", fields: [followedById], references: [id], onDelete: Cascade)
  followedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @db.Timestamp()
}

model Industry {
  id            String    @id @default(uuid())
  type          String    @unique
  description   String?
  isActive      Boolean   @default(false)
  pirorityOrder Int       @default(autoincrement())
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt @db.Timestamp()
}
